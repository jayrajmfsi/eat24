<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Address;
use AppBundle\Entity\Utils\Point;
use Doctrine\ORM\EntityRepository;

/**
 * AddressRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AddressRepository extends EntityRepository
{
    public function listUserAddress($customerId)
    {
        $qb = $this->createQueryBuilder('address')
            ->select('address.completeAddress')
            ->addSelect('address.mapLocation as location')
            ->addSelect('address.token as addressCode')
            ->addSelect('address.nickName')
            ->where('address.customerId = :customerId')
            ->andWhere('address.addressType = :addressType')
            ->andWhere('address.isActive =:isActive')
            ->setParameters([
                'customerId' => $customerId,
                'addressType' => Address::CUSTOMER_ADDRESS,
                'isActive' => Address::ADDRESS_ACTIVE
            ])
        ;

        return $qb->getQuery()->getArrayResult();
    }

    public function getAddress($customerId, $addressCode, $addressType = Address::CUSTOMER_ADDRESS)
    {
        $qb = $this->createQueryBuilder('address')
            ->where('address.customerId = :customerId')
            ->andWhere('address.token = :token')
            ->andWhere('address.addressType = :type')
            ->setParameters(['token' => $addressCode, 'customerId' => $customerId, 'type' => $addressType])
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function checkDeliveryLocation($geoPoint, $restaurantId, $range)
    {
        $qb = $this->createQueryBuilder('address')
            ->where('address.customerId = :restaurantId')
            ->andWhere('address.addressType = :type')
            ->andWhere('ST_DISTANCE_SPHERE(address.geoPoint, POINT_STR(:point)) / 1000 <='. $range)
            ->setParameters([
                'restaurantId' => $restaurantId,
                'type' => Address::RESTAURANT_ADDRESS,
                'point' => $geoPoint
            ])
        ;

        return $qb->getQuery()->getArrayResult();
    }
}

