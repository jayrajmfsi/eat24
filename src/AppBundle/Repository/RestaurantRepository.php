<?php
/**
 *  Restaurant Repository
 *  @category Repository
 *  @author Jayraj Arora<jayraja@mindfiresolutions.com>
 */
namespace AppBundle\Repository;

use AppBundle\Entity\Address;
use AppBundle\Entity\Restaurant;
use AppBundle\Entity\Utils\Point;
use Doctrine\ORM\ORMException;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\QueryBuilder;

/**
 * RestaurantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RestaurantRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Fetch restaurant list data
     * @param array $filter
     * @param array $sort
     * @param array $pagination
     * @param integer $restaurantRange
     * @return array
     * @throws ORMException
     */
    public function fetchRestaurantListData($restaurantRange = 10, $filter = [], $sort = [], $pagination = [])
    {
        $qb = $this->createQueryBuilder('r');

        // applying filters
        $qb = $this->addFilterSortParameters($qb, $restaurantRange, $filter, $sort);
        $qb->setFirstResult(($pagination['page'] - 1) * $pagination['limit'])
            ->setMaxResults($pagination['limit'])
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     *  Function to add Filter and Sort parameters to List Query Builder.
     *  adding Filters to QueryBuilder
     *
     *  @param QueryBuilder $qb
     *  @param array $filter
     *  @param array $sort
     *  @param integer $restaurantRange
     *  @return QueryBuilder
     *  @throws ORMException
     */
    public function addFilterSortParameters($qb, $restaurantRange, $filter = [], $sort = [])
    {
        $params = [];

        // check if restaurant name pattern matches with restaurants in db
        if (isset($filter['restaurantName'])) {
            $qb->where('r.name LIKE :restaurant');
            $params['restaurant'] = '%'.$filter['restaurantName'].'%';
        }

        // check if latitude and longitude filters are set
        if (isset($filter['latitude']) && isset($filter['longitude'])) {
            // create a geo-point using them
            $geoPoint = new Point($filter['latitude'], $filter['longitude']);

            // join the address and fetch the restaurants according to the point entered as input
            $qb->join('AppBundle:Address', 'a', Join::WITH, 'a.customerId = r.id AND a.addressType=:type');
            $qb->andWhere('ST_DISTANCE_SPHERE(a.geoPoint, POINT_STR(:point)) / 1000 <='.$restaurantRange);
            $params['type'] = Address::RESTAURANT_ADDRESS;
            $params['point'] = $geoPoint;
        }

        // list all restaurant according to the cuisines entered
        if (isset($filter['cuisine'])) {
            $qb->join('r.cuisines', 'c');
            $qb->andWhere('c.name=:cuisine');
            $params['cuisine'] = $filter['cuisine'];
        }

        // applying sorting to QueryBuilder
        if (isset(Restaurant::$allowedSortingAttributesMap[$sort[0]])) {
            $qb->addOrderBy('r.'. Restaurant::$allowedSortingAttributesMap[$sort[0]], $sort[1]);
        } else {
            $qb->addOrderBy('r.'.Restaurant::$allowedSortingAttributesMap['restaurantRating'], 'DESC');
        }

        // Setting the Parameters.
        $qb->setParameters($params);

        return $qb;
    }
    /**
     *  Function to count the number of records for applied filters and sort
     *  parameters.
     *  @param $restaurantRange
     *  @param array $filter
     *  @param array $sort
     *
     *  @return integer
     *  @throws ORMException
     */
    public function countUserRecords($restaurantRange = 10, $filter = [], $sort = [])
    {
        // count the total records
        $qb = $this->createQueryBuilder('r')->select('count(r.id) as totalRecords');

        // Applying Filters.
        $qb = $this->addFilterSortParameters($qb, $restaurantRange, $filter, $sort);

        return (int)$qb->getQuery()->getArrayResult()[0]['totalRecords'];
    }
}
